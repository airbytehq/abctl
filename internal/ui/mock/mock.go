// Code generated by MockGen. DO NOT EDIT.
// Source: internal/ui/ui.go
//
// Generated by this command:
//
//	mockgen --source internal/ui/ui.go -destination internal/ui/mock/mock.go -package mock
//

// Package mock is a generated GoMock package.
package mock

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockProvider is a mock of Provider interface.
type MockProvider struct {
	ctrl     *gomock.Controller
	recorder *MockProviderMockRecorder
	isgomock struct{}
}

// MockProviderMockRecorder is the mock recorder for MockProvider.
type MockProviderMockRecorder struct {
	mock *MockProvider
}

// NewMockProvider creates a new mock instance.
func NewMockProvider(ctrl *gomock.Controller) *MockProvider {
	mock := &MockProvider{ctrl: ctrl}
	mock.recorder = &MockProviderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockProvider) EXPECT() *MockProviderMockRecorder {
	return m.recorder
}

// Confirm mocks base method.
func (m *MockProvider) Confirm(prompt string, defaultValue bool) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Confirm", prompt, defaultValue)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Confirm indicates an expected call of Confirm.
func (mr *MockProviderMockRecorder) Confirm(prompt, defaultValue any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Confirm", reflect.TypeOf((*MockProvider)(nil).Confirm), prompt, defaultValue)
}

// FilterableSelect mocks base method.
func (m *MockProvider) FilterableSelect(prompt string, options []string) (int, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FilterableSelect", prompt, options)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// FilterableSelect indicates an expected call of FilterableSelect.
func (mr *MockProviderMockRecorder) FilterableSelect(prompt, options any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FilterableSelect", reflect.TypeOf((*MockProvider)(nil).FilterableSelect), prompt, options)
}

// NewLine mocks base method.
func (m *MockProvider) NewLine() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "NewLine")
}

// NewLine indicates an expected call of NewLine.
func (mr *MockProviderMockRecorder) NewLine() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewLine", reflect.TypeOf((*MockProvider)(nil).NewLine))
}

// RunWithSpinner mocks base method.
func (m *MockProvider) RunWithSpinner(message string, operation func() error) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RunWithSpinner", message, operation)
	ret0, _ := ret[0].(error)
	return ret0
}

// RunWithSpinner indicates an expected call of RunWithSpinner.
func (mr *MockProviderMockRecorder) RunWithSpinner(message, operation any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RunWithSpinner", reflect.TypeOf((*MockProvider)(nil).RunWithSpinner), message, operation)
}

// Select mocks base method.
func (m *MockProvider) Select(prompt string, options []string) (int, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Select", prompt, options)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Select indicates an expected call of Select.
func (mr *MockProviderMockRecorder) Select(prompt, options any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Select", reflect.TypeOf((*MockProvider)(nil).Select), prompt, options)
}

// ShowError mocks base method.
func (m *MockProvider) ShowError(err error) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "ShowError", err)
}

// ShowError indicates an expected call of ShowError.
func (mr *MockProviderMockRecorder) ShowError(err any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ShowError", reflect.TypeOf((*MockProvider)(nil).ShowError), err)
}

// ShowHeading mocks base method.
func (m *MockProvider) ShowHeading(message string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "ShowHeading", message)
}

// ShowHeading indicates an expected call of ShowHeading.
func (mr *MockProviderMockRecorder) ShowHeading(message any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ShowHeading", reflect.TypeOf((*MockProvider)(nil).ShowHeading), message)
}

// ShowInfo mocks base method.
func (m *MockProvider) ShowInfo(message string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "ShowInfo", message)
}

// ShowInfo indicates an expected call of ShowInfo.
func (mr *MockProviderMockRecorder) ShowInfo(message any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ShowInfo", reflect.TypeOf((*MockProvider)(nil).ShowInfo), message)
}

// ShowJSON mocks base method.
func (m *MockProvider) ShowJSON(data any) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ShowJSON", data)
	ret0, _ := ret[0].(error)
	return ret0
}

// ShowJSON indicates an expected call of ShowJSON.
func (mr *MockProviderMockRecorder) ShowJSON(data any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ShowJSON", reflect.TypeOf((*MockProvider)(nil).ShowJSON), data)
}

// ShowKeyValue mocks base method.
func (m *MockProvider) ShowKeyValue(key, value string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "ShowKeyValue", key, value)
}

// ShowKeyValue indicates an expected call of ShowKeyValue.
func (mr *MockProviderMockRecorder) ShowKeyValue(key, value any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ShowKeyValue", reflect.TypeOf((*MockProvider)(nil).ShowKeyValue), key, value)
}

// ShowProgress mocks base method.
func (m *MockProvider) ShowProgress(message string) func() {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ShowProgress", message)
	ret0, _ := ret[0].(func())
	return ret0
}

// ShowProgress indicates an expected call of ShowProgress.
func (mr *MockProviderMockRecorder) ShowProgress(message any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ShowProgress", reflect.TypeOf((*MockProvider)(nil).ShowProgress), message)
}

// ShowSection mocks base method.
func (m *MockProvider) ShowSection(heading string, lines ...string) {
	m.ctrl.T.Helper()
	varargs := []any{heading}
	for _, a := range lines {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "ShowSection", varargs...)
}

// ShowSection indicates an expected call of ShowSection.
func (mr *MockProviderMockRecorder) ShowSection(heading any, lines ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{heading}, lines...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ShowSection", reflect.TypeOf((*MockProvider)(nil).ShowSection), varargs...)
}

// ShowSuccess mocks base method.
func (m *MockProvider) ShowSuccess(message string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "ShowSuccess", message)
}

// ShowSuccess indicates an expected call of ShowSuccess.
func (mr *MockProviderMockRecorder) ShowSuccess(message any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ShowSuccess", reflect.TypeOf((*MockProvider)(nil).ShowSuccess), message)
}

// ShowYAML mocks base method.
func (m *MockProvider) ShowYAML(data any) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ShowYAML", data)
	ret0, _ := ret[0].(error)
	return ret0
}

// ShowYAML indicates an expected call of ShowYAML.
func (mr *MockProviderMockRecorder) ShowYAML(data any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ShowYAML", reflect.TypeOf((*MockProvider)(nil).ShowYAML), data)
}

// TextInput mocks base method.
func (m *MockProvider) TextInput(prompt, defaultValue string, validator func(string) error) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TextInput", prompt, defaultValue, validator)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TextInput indicates an expected call of TextInput.
func (mr *MockProviderMockRecorder) TextInput(prompt, defaultValue, validator any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TextInput", reflect.TypeOf((*MockProvider)(nil).TextInput), prompt, defaultValue, validator)
}

// Title mocks base method.
func (m *MockProvider) Title(message string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Title", message)
}

// Title indicates an expected call of Title.
func (mr *MockProviderMockRecorder) Title(message any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Title", reflect.TypeOf((*MockProvider)(nil).Title), message)
}
