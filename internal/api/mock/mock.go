// Code generated by MockGen. DO NOT EDIT.
// Source: internal/api/client.go
//
// Generated by this command:
//
//	mockgen --source internal/api/client.go -destination internal/api/mock/mock.go -package mock
//

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	api "github.com/airbytehq/abctl/internal/api"
	gomock "go.uber.org/mock/gomock"
)

// MockService is a mock of Service interface.
type MockService struct {
	ctrl     *gomock.Controller
	recorder *MockServiceMockRecorder
	isgomock struct{}
}

// MockServiceMockRecorder is the mock recorder for MockService.
type MockServiceMockRecorder struct {
	mock *MockService
}

// NewMockService creates a new mock instance.
func NewMockService(ctrl *gomock.Controller) *MockService {
	mock := &MockService{ctrl: ctrl}
	mock.recorder = &MockServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockService) EXPECT() *MockServiceMockRecorder {
	return m.recorder
}

// CreateDataplane mocks base method.
func (m *MockService) CreateDataplane(ctx context.Context, req api.CreateDataplaneRequest) (*api.CreateDataplaneResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateDataplane", ctx, req)
	ret0, _ := ret[0].(*api.CreateDataplaneResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateDataplane indicates an expected call of CreateDataplane.
func (mr *MockServiceMockRecorder) CreateDataplane(ctx, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateDataplane", reflect.TypeOf((*MockService)(nil).CreateDataplane), ctx, req)
}

// CreateRegion mocks base method.
func (m *MockService) CreateRegion(ctx context.Context, request api.CreateRegionRequest) (*api.Region, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateRegion", ctx, request)
	ret0, _ := ret[0].(*api.Region)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateRegion indicates an expected call of CreateRegion.
func (mr *MockServiceMockRecorder) CreateRegion(ctx, request any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateRegion", reflect.TypeOf((*MockService)(nil).CreateRegion), ctx, request)
}

// DeleteDataplane mocks base method.
func (m *MockService) DeleteDataplane(ctx context.Context, id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteDataplane", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteDataplane indicates an expected call of DeleteDataplane.
func (mr *MockServiceMockRecorder) DeleteDataplane(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteDataplane", reflect.TypeOf((*MockService)(nil).DeleteDataplane), ctx, id)
}

// GetDataplane mocks base method.
func (m *MockService) GetDataplane(ctx context.Context, id string) (*api.Dataplane, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDataplane", ctx, id)
	ret0, _ := ret[0].(*api.Dataplane)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDataplane indicates an expected call of GetDataplane.
func (mr *MockServiceMockRecorder) GetDataplane(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDataplane", reflect.TypeOf((*MockService)(nil).GetDataplane), ctx, id)
}

// GetOrganization mocks base method.
func (m *MockService) GetOrganization(ctx context.Context, organizationID string) (*api.Organization, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOrganization", ctx, organizationID)
	ret0, _ := ret[0].(*api.Organization)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOrganization indicates an expected call of GetOrganization.
func (mr *MockServiceMockRecorder) GetOrganization(ctx, organizationID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrganization", reflect.TypeOf((*MockService)(nil).GetOrganization), ctx, organizationID)
}

// GetRegion mocks base method.
func (m *MockService) GetRegion(ctx context.Context, regionID string) (*api.Region, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRegion", ctx, regionID)
	ret0, _ := ret[0].(*api.Region)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRegion indicates an expected call of GetRegion.
func (mr *MockServiceMockRecorder) GetRegion(ctx, regionID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRegion", reflect.TypeOf((*MockService)(nil).GetRegion), ctx, regionID)
}

// ListDataplanes mocks base method.
func (m *MockService) ListDataplanes(ctx context.Context) ([]api.Dataplane, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListDataplanes", ctx)
	ret0, _ := ret[0].([]api.Dataplane)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListDataplanes indicates an expected call of ListDataplanes.
func (mr *MockServiceMockRecorder) ListDataplanes(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListDataplanes", reflect.TypeOf((*MockService)(nil).ListDataplanes), ctx)
}

// ListOrganizations mocks base method.
func (m *MockService) ListOrganizations(ctx context.Context) ([]*api.Organization, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListOrganizations", ctx)
	ret0, _ := ret[0].([]*api.Organization)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListOrganizations indicates an expected call of ListOrganizations.
func (mr *MockServiceMockRecorder) ListOrganizations(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListOrganizations", reflect.TypeOf((*MockService)(nil).ListOrganizations), ctx)
}

// ListRegions mocks base method.
func (m *MockService) ListRegions(ctx context.Context, organizationID string) ([]*api.Region, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListRegions", ctx, organizationID)
	ret0, _ := ret[0].([]*api.Region)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListRegions indicates an expected call of ListRegions.
func (mr *MockServiceMockRecorder) ListRegions(ctx, organizationID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListRegions", reflect.TypeOf((*MockService)(nil).ListRegions), ctx, organizationID)
}
