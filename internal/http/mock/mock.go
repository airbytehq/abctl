// Code generated by MockGen. DO NOT EDIT.
// Source: internal/http/client.go
//
// Generated by this command:
//
//	mockgen --source internal/http/client.go -destination internal/http/mock/mock.go -package mock
//

// Package mock is a generated GoMock package.
package mock

import (
	http "net/http"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockHTTPDoer is a mock of HTTPDoer interface.
type MockHTTPDoer struct {
	ctrl     *gomock.Controller
	recorder *MockHTTPDoerMockRecorder
	isgomock struct{}
}

// MockHTTPDoerMockRecorder is the mock recorder for MockHTTPDoer.
type MockHTTPDoerMockRecorder struct {
	mock *MockHTTPDoer
}

// NewMockHTTPDoer creates a new mock instance.
func NewMockHTTPDoer(ctrl *gomock.Controller) *MockHTTPDoer {
	mock := &MockHTTPDoer{ctrl: ctrl}
	mock.recorder = &MockHTTPDoerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockHTTPDoer) EXPECT() *MockHTTPDoerMockRecorder {
	return m.recorder
}

// Do mocks base method.
func (m *MockHTTPDoer) Do(req *http.Request) (*http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Do", req)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Do indicates an expected call of Do.
func (mr *MockHTTPDoerMockRecorder) Do(req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Do", reflect.TypeOf((*MockHTTPDoer)(nil).Do), req)
}
