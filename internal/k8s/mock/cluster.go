// Code generated by MockGen. DO NOT EDIT.
// Source: internal/k8s/cluster.go
//
// Generated by this command:
//
//	mockgen --source internal/k8s/cluster.go -destination internal/k8s/mock/cluster.go -package mock
//

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	docker "github.com/airbytehq/abctl/internal/docker"
	k8s "github.com/airbytehq/abctl/internal/k8s"
	gomock "go.uber.org/mock/gomock"
)

// MockCluster is a mock of Cluster interface.
type MockCluster struct {
	ctrl     *gomock.Controller
	recorder *MockClusterMockRecorder
	isgomock struct{}
}

// MockClusterMockRecorder is the mock recorder for MockCluster.
type MockClusterMockRecorder struct {
	mock *MockCluster
}

// NewMockCluster creates a new mock instance.
func NewMockCluster(ctrl *gomock.Controller) *MockCluster {
	mock := &MockCluster{ctrl: ctrl}
	mock.recorder = &MockClusterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCluster) EXPECT() *MockClusterMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockCluster) Create(ctx context.Context, portHTTP int, extraMounts []k8s.ExtraVolumeMount) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, portHTTP, extraMounts)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockClusterMockRecorder) Create(ctx, portHTTP, extraMounts any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockCluster)(nil).Create), ctx, portHTTP, extraMounts)
}

// Delete mocks base method.
func (m *MockCluster) Delete(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockClusterMockRecorder) Delete(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockCluster)(nil).Delete), ctx)
}

// Exists mocks base method.
func (m *MockCluster) Exists(ctx context.Context) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Exists", ctx)
	ret0, _ := ret[0].(bool)
	return ret0
}

// Exists indicates an expected call of Exists.
func (mr *MockClusterMockRecorder) Exists(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Exists", reflect.TypeOf((*MockCluster)(nil).Exists), ctx)
}

// LoadImages mocks base method.
func (m *MockCluster) LoadImages(ctx context.Context, dockerClient docker.Client, images []string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "LoadImages", ctx, dockerClient, images)
}

// LoadImages indicates an expected call of LoadImages.
func (mr *MockClusterMockRecorder) LoadImages(ctx, dockerClient, images any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LoadImages", reflect.TypeOf((*MockCluster)(nil).LoadImages), ctx, dockerClient, images)
}
