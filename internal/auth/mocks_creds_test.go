// Code generated by MockGen. DO NOT EDIT.
// Source: internal/auth/auth.go
//
// Generated by this command:
//
//	mockgen --source internal/auth/auth.go -destination internal/auth/mocks_creds_test.go -package auth
//

// Package auth is a generated GoMock package.
package auth

import (
	http "net/http"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockCredentialsStore is a mock of CredentialsStore interface.
type MockCredentialsStore struct {
	ctrl     *gomock.Controller
	recorder *MockCredentialsStoreMockRecorder
	isgomock struct{}
}

// MockCredentialsStoreMockRecorder is the mock recorder for MockCredentialsStore.
type MockCredentialsStoreMockRecorder struct {
	mock *MockCredentialsStore
}

// NewMockCredentialsStore creates a new mock instance.
func NewMockCredentialsStore(ctrl *gomock.Controller) *MockCredentialsStore {
	mock := &MockCredentialsStore{ctrl: ctrl}
	mock.recorder = &MockCredentialsStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCredentialsStore) EXPECT() *MockCredentialsStoreMockRecorder {
	return m.recorder
}

// Load mocks base method.
func (m *MockCredentialsStore) Load() (*Credentials, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Load")
	ret0, _ := ret[0].(*Credentials)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Load indicates an expected call of Load.
func (mr *MockCredentialsStoreMockRecorder) Load() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Load", reflect.TypeOf((*MockCredentialsStore)(nil).Load))
}

// Save mocks base method.
func (m *MockCredentialsStore) Save(arg0 *Credentials) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Save", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Save indicates an expected call of Save.
func (mr *MockCredentialsStoreMockRecorder) Save(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Save", reflect.TypeOf((*MockCredentialsStore)(nil).Save), arg0)
}

// MockProvider is a mock of Provider interface.
type MockProvider struct {
	ctrl     *gomock.Controller
	recorder *MockProviderMockRecorder
	isgomock struct{}
}

// MockProviderMockRecorder is the mock recorder for MockProvider.
type MockProviderMockRecorder struct {
	mock *MockProvider
}

// NewMockProvider creates a new mock instance.
func NewMockProvider(ctrl *gomock.Controller) *MockProvider {
	mock := &MockProvider{ctrl: ctrl}
	mock.recorder = &MockProviderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockProvider) EXPECT() *MockProviderMockRecorder {
	return m.recorder
}

// Do mocks base method.
func (m *MockProvider) Do(req *http.Request) (*http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Do", req)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Do indicates an expected call of Do.
func (mr *MockProviderMockRecorder) Do(req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Do", reflect.TypeOf((*MockProvider)(nil).Do), req)
}

// Load mocks base method.
func (m *MockProvider) Load() (*Credentials, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Load")
	ret0, _ := ret[0].(*Credentials)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Load indicates an expected call of Load.
func (mr *MockProviderMockRecorder) Load() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Load", reflect.TypeOf((*MockProvider)(nil).Load))
}

// Save mocks base method.
func (m *MockProvider) Save(arg0 *Credentials) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Save", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Save indicates an expected call of Save.
func (mr *MockProviderMockRecorder) Save(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Save", reflect.TypeOf((*MockProvider)(nil).Save), arg0)
}
